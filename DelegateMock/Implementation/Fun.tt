<#@ template debug="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\TemplateHelpers\bin\TemplateHelpers.dll" #>
<#@ import namespace="TemplateHelpers" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics.Contracts;
using DelegateMock.FunctionStub;

namespace DelegateMock.Implementation
{
// ReSharper disable RedundantLambdaSignatureParentheses
   public static class Fun
   {
<#T4Helper.ForEachInRange(0, 16, (i, _) => {#>
      public static Func<<#=_("TP#", ", ")#>TRet> Sequence<<#=_("TP#", ", ")#>TRet>(params Func<<#=_("TP#", ", ")#>TRet>[] funcSequence)
      {
         Contract.Ensures(Contract.Result<Func<<#=_("TP#", ", ")#>TRet>>() != null);
			VerifiContracts(funcSequence);

         var seq = CreateSequence(funcSequence);
         return (<#=_("p#")#>) => seq.GetNext()(<#=_("p#")#>);
      }
      
      public static Action<#=_("<", "TP#", ">")#> Sequence<#=_("<", "TP#", ">")#>(params Action<#=_("<", "TP#", ">")#>[] funcSequence)
      {
         Contract.Ensures(Contract.Result<Action<#=_("<", "TP#", ">")#>>() != null);
			VerifiContracts(funcSequence);

         var seq = CreateSequence(funcSequence);
         return (<#=_("p#")#>) => seq.GetNext()(<#=_("p#")#>);
      }

<#});#>
      private static Sequence<T> CreateSequence<T>(T[] funcSequence)
      {
         return new Sequence<T>(funcSequence);
      }
      
      //[ContractArgumentValidator] //todo this attribute ony in 4.5
      private static void VerifiContracts<T>(T[] funcSequence) where T : class
      {
         if (funcSequence == null)
            throw new ArgumentNullException("funcSequence");
         if (funcSequence.Length == 0)
            throw new ArgumentException("funcSequence must be greather than 0.");
         if (funcSequence.Any(f => f == null))
            throw new ArgumentException("Any delegate in funcSequence cannot be null.");
         //Contract.EndContractBlock();
      }
   }
// ReSharper enable RedundantLambdaSignatureParentheses
}
