<#@ template debug="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\TemplateHelpers\bin\TemplateHelpers.dll" #>
<#@ import namespace="TemplateHelpers" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace DelegateMock.FunctionStub
{
// ReSharper disable RedundantLambdaSignatureParentheses
<#T4Helper.ForEachInRange(0, 16, (i, _) => {#>
   public sealed class Node<<#=_("TP#", ", ")#>TRet> : INode<<#=_("TP#", ", ")#>TRet>
   {
      public Node(Node<<#=_("TP#", ", ")#>TRet> previous, Func<<#=_("TP#", ", ")#>bool> filter, Func<<#=_("TP#", ", ")#>TRet> resultBuilder)
      {
         _previous = previous;
         _filter = filter;
         _resultBuilder = resultBuilder;
      }

      private readonly Node<<#=_("TP#", ", ")#>TRet> _previous;
      Node<<#=_("TP#", ", ")#>TRet> INode<<#=_("TP#", ", ")#>TRet>.Previous
      {
         get { return _previous; }
      }

      private readonly Func<<#=_("TP#", ", ")#>bool> _filter;
      Func<<#=_("TP#", ", ")#>bool> INode<<#=_("TP#", ", ")#>TRet>.Filter
      {
         get { return _filter; }
      }

      private readonly Func<<#=_("TP#", ", ")#>TRet> _resultBuilder;
      Func<<#=_("TP#", ", ")#>TRet> INode<<#=_("TP#", ", ")#>TRet>.ResultBuilder
      {
         get { return _resultBuilder; }
      }

      public static readonly Node<<#=_("TP#", ", ")#>TRet> Empty = null;

      public Func<<#=_("TP#", ", ")#>TRet> AsFunc()
      {
         return (<#=_("p#")#>) =>
         {
            TRet returnValue;
            if (TryGetReturnValue(this, <#=_("p#", ", ")#>out returnValue))
               return returnValue;

            throw new Exception("No result to return.");
         };
      }

      private static bool TryGetReturnValue(INode<<#=_("TP#", ", ")#>TRet> node, <#=_("TP# p#", ", ")#>out TRet returnValue)
      {
         if (node.Previous != null && TryGetReturnValue(node.Previous, <#=_("p#", ", ")#>out returnValue))
            return true;

         if (node.Filter(<#=_("p#")#>))
         {
            returnValue = node.ResultBuilder(<#=_("p#")#>);
            return true;
         }


         returnValue = default(TRet);
         return false;
      }
   }

<#});#>
// ReSharper enable RedundantLambdaSignatureParentheses
}
