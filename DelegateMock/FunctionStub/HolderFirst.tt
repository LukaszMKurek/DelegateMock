<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHelper.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace DelegateMock.FunctionStub
{
<# TemplateGeneratorHelper.ForEach((templateParametersWithComa, templateParametersWithBracked, parameters, parametersWithComa, parametersWithType, parametersWithTypeAndComa, parametersWithTypeA) => { #>
   public sealed class HolderFirst<#= templateParametersWithBracked #> : IHolderFirst<#= templateParametersWithBracked #>
   {
      public HolderFirst(Func<<#= templateParametersWithComa #>bool> filter)
      {
         _filter = filter;
      }

      private readonly Func<<#= templateParametersWithComa #>bool> _filter;
      Func<<#= templateParametersWithComa #>bool> IHolderFirst<#= templateParametersWithBracked #>.Filter
      {
         get { return _filter; }
      }
   }

<# }); #>
}
