<#@ template debug="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\TemplateHelpers\bin\TemplateHelpers.dll" #>
<#@ import namespace="TemplateHelpers" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace DelegateMock.FunctionStub
{
// ReSharper disable RedundantLambdaSignatureParentheses
   public static class For
   {
      public static HolderFirst Args()
      {
         return new HolderFirst(filter: () => true);
      }

      public static Node<TRet> ReturnSequence<TRet>(this IHolderFirst holder, params TRet[] returnValues)
      {
         var sequence = new Sequence<TRet>(returnValues);
         return new Node<TRet>(filter: holder.Filter, resultBuilder: sequence.GetNext, previous: Node<TRet>.Empty);
      }

      //*******************************************************************************************************************************************************************************************************************************************************

<#T4Helper.ForEachInRange(1, 16, (i, _) => {#>
      public static HolderFirst<#=_("<", "TP#", ">")#> Args<#=_("<", "TP#", ">")#>()
      {
         return new HolderFirst<#=_("<", "TP#", ">")#>(filter: (<#=_("p#")#>) => true);
      }
      
      public static HolderFirst<#=_("<", "TP#", ">")#> Args<#=_("<", "TP#", ">")#>(Func<<#=_("TP#", ", ")#>bool> filter)
      {
         return new HolderFirst<#=_("<", "TP#", ">")#>(filter: filter);
      }

      public static HolderFirst<#=_("<", "TP#", ">")#> Args<#=_("<", "TP#", ">")#>(<#=_("TP# a#")#>)
      {
         return new HolderFirst<#=_("<", "TP#", ">")#>(filter: (<#=_("p#")#>) => new object[]{ p1 }.SequenceEqual(new object[]{ a1 }));
      }

      //-----
      public static Node<<#=_("TP#", ", ")#>TRet> Return<<#=_("TP#", ", ")#>TRet>(this IHolderFirst<#=_("<", "TP#", ">")#> holder, TRet returnValue)
      {
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: holder.Filter, resultBuilder: (<#=_("p#")#>) => returnValue, previous: Node<<#=_("TP#", ", ")#>TRet>.Empty);
      }

      public static Node<<#=_("TP#", ", ")#>TRet> Return<<#=_("TP#", ", ")#>TRet>(this IHolderNext<<#=_("TP#", ", ")#>TRet> holder, TRet returnValue)
      {
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: holder.Filter, resultBuilder: (<#=_("p#")#>) => returnValue, previous: holder.Node);
      }

      public static Node<<#=_("TP#", ", ")#>TRet> Call<<#=_("TP#", ", ")#>TRet>(this IHolderNext<<#=_("TP#", ", ")#>TRet> holder, Func<<#=_("TP#", ", ")#>TRet> action)
      {
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: holder.Filter, resultBuilder: action, previous: holder.Node);
      }

      //-----
      public static Node<<#=_("TP#", ", ")#>TRet> ReturnSequence<<#=_("TP#", ", ")#>TRet>(this IHolderFirst<#=_("<", "TP#", ">")#> holder, params TRet[] returnValues)
      {
         var sequence = new Sequence<TRet>(returnValues);
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: holder.Filter, resultBuilder: (<#=_("p#")#>) => sequence.GetNext(), previous: Node<<#=_("TP#", ", ")#>TRet>.Empty);
      }

      public static Node<<#=_("TP#", ", ")#>TRet> ReturnSequence<<#=_("TP#", ", ")#>TRet>(this IHolderNext<<#=_("TP#", ", ")#>TRet> holder, params TRet[] returnValues)
      {
         var sequence = new Sequence<TRet>(returnValues);
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: holder.Filter, resultBuilder: (<#=_("p#")#>) => sequence.GetNext(), previous: holder.Node);
      }

      //-----
      public static HolderNext<<#=_("TP#", ", ")#>TRet> ForArgs<<#=_("TP#", ", ")#>TRet>(this Node<<#=_("TP#", ", ")#>TRet> node, Func<<#=_("TP#", ", ")#>bool> filter)
      {
         return new HolderNext<<#=_("TP#", ", ")#>TRet>(filter: filter, node: node);
      }

      public static HolderNext<<#=_("TP#", ", ")#>TRet> ForArgs<<#=_("TP#", ", ")#>TRet>(this Node<<#=_("TP#", ", ")#>TRet> node, <#=_("TP# a#")#>)
      {
         return new HolderNext<<#=_("TP#", ", ")#>TRet>(filter: (<#=_("p#")#>) => new object[]{ p1 }.SequenceEqual(new object[]{ a1 }), node: node);
      }

      public static Node<<#=_("TP#", ", ")#>TRet> ForRest<<#=_("TP#", ", ")#>TRet>(this Node<<#=_("TP#", ", ")#>TRet> node, TRet returnValue)
      {
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: (<#=_("p#")#>) => true, resultBuilder: (<#=_("p#")#>) => returnValue, previous: node);
      }

      public static Node<<#=_("TP#", ", ")#>TRet> ForRestCall<<#=_("TP#", ", ")#>TRet>(this Node<<#=_("TP#", ", ")#>TRet> node, Func<<#=_("TP#", ", ")#>TRet> action)
      {
         return new Node<<#=_("TP#", ", ")#>TRet>(filter: (<#=_("p#")#>) => true, resultBuilder: action, previous: node);
      }
      //*******************************************************************************************************************************************************************************************************************************************************

<#});#>
   }
// ReSharper enable RedundantLambdaSignatureParentheses
}
