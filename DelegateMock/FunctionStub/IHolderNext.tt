<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHelper.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace DelegateMock.FunctionStub
{
// ReSharper disable TypeParameterCanBeVariant

<# TemplateGeneratorHelper.ForEach((templateParametersWithComa, templateParametersWithBracked, parameters, parametersWithComa, parametersWithType, parametersWithTypeAndComa, parametersWithTypeA) => { #>
   public interface IHolderNext<<#= templateParametersWithComa #>TRet>
   {
      Node<<#= templateParametersWithComa #>TRet> Node { get; }
      Func<<#= templateParametersWithComa #>bool> Filter { get; }
   }

<# }); #>
// ReSharper restore TypeParameterCanBeVariant
}
